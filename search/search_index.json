{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-pydaq-documentation","title":"Welcome to PYDAQ documentation","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This site presents the full documentation of PYDAQ - Data Acquisition and Experimental Analysis with Python.</p> <p>This package was initially designed to use an experimental device for data  acquisition and signal generation when performing different experiments,  such as a step-response test. However, from version v0.0.5 onwards,  PYDAQ introduces different functionalities, including real-time system  identification using experimental data. One can use PYDAQ using different boards (check jupyter notebook examples folder),  through a Graphical User Interface or via command line. </p> <p>Also, step-response experiments can be easily performed, as showed up in Step response (NIDAQ) and Step response (Arduino).</p> <p>Furthermore, this tool can be used to apply any generic output in an experimental tool, such as PRBS (Pseudo Random Binary Signal) or other persistently exciting signal, in order to generate data for black box system identification.</p> <p>The user is able to get/send data either using a command line method of a GUI (Graphical User Interface), speeding up prototypes and quick experiments, keeping the user confidence in the acquired/sent data. Besides, the command line interface allows one to keep developing new features while data are acquired.</p>"},{"location":"#installation-and-requirements","title":"Installation and Requirements","text":"<p>The fastest way to install PYDAQ is using pip:</p> <pre><code>pip install pydaq\n</code></pre> <p>PYDAQ requires:</p> <ul> <li>Driver of the board used (Arduino or National Instruments NIDAQ)</li> <li>nidaqmx (&gt;=0.6.5) for data acquisition from National Instruments Boards</li> <li>matplotlib (&gt;=3.5.3) as a visualization tool</li> <li>numpy (&gt;=1.22.3) to process data</li> <li>PySide6 (&gt;=6.7.1), PySide6_Addons, PySide6_Essentials and shiboken6 as a Graphical User Interface framework</li> <li>pyserial (&gt;=3.5) to manage data to/from Arduino</li> <li>sysidentpy (==0.3.4) and bitarray (&gt;=3.0.0) for model acquisition/signal generation</li> <li>packaging (&gt;=24.1).</li> </ul>"},{"location":"#documentation-map","title":"Documentation Map","text":""},{"location":"#data-acquisition","title":"Data Acquisition","text":"<p>Here the user will find examples of how to use GUI (Graphical User Interface) and also commando line to acquire data using NIDAQ or Arduino boards.</p>"},{"location":"#sending-data","title":"Sending data","text":"<p>In this Section is presented how the user can send data from NIDAQ or Arduino, by mean of command line or a GUI (Graphical User Interface).</p>"},{"location":"#step-response","title":"Step response","text":"<p>Here the user will find examples of how to define parameters to perform a step response experiments with available boards (NIDAQ/Arduino).</p>"},{"location":"#get-model","title":"Get Model","text":"<p>If you need to estimate a model using experimental data,  this section is for you. Here, you can find  documentation on how to use PYDAQ for this purpose with (NIDAQ/Arduino)</p>"},{"location":"#examples","title":"Examples","text":"<p>In this section it will be provided Jupyter Notebook examples presenting code functionalities (NIDAQ/Arduino).</p>"},{"location":"#screenshots","title":"Screenshots","text":""},{"location":"get_data_arduino/","title":"Data Acquisition with Arduino","text":"<p>NOTE 1: before working with PYDAQ, device driver should be installed and working correctly as a DAQ (Data Acquisition) device</p> <p>NOTE 2 To acquire/send data with arduino, the code provided here (located at arduino_code) should be firstly uploaded in Arduino. Default input port is A0 and this port can be changed in the above mentioned code.</p> <p>NOTE 3 PYDAQ is programmed to use 10 bits as a ADC resolution, and 0V and 5V as the input range. To change this, the user can alter the following variables:</p> <pre><code>self.arduino_ai_bits = 10\nself.ard_ai_max = 5\nself.ard_ai_min = 0\n</code></pre>"},{"location":"get_data_arduino/#data-acquitition-using-graphical-user-interface-gui","title":"Data Acquitition using Graphical User Interface (GUI)","text":"<p>Using GUI to acquire data is really straighforward and require only two LOC (lines of code):</p> <pre><code>from pydaq.pydaq_global import PydaqGui\n\n# Launch the interface\nPydaqGui()\n</code></pre> <p>After this command, the following screen will show up, where the user should select the Arduino option and go to the Get Data tab, to be able to define parameters and start to acquire data.</p> <p></p> <p>The user is now able to select desired device, sample period and session duration. Also, the user will define if the data will or not be plotted and saved, as well as the path to save data.</p>"},{"location":"get_data_arduino/#data-acquitition-using-command-line","title":"Data Acquitition using command line","text":"<p>It will be presented how to use GetData (and get_data_arduino) to acquire signal using an Arduino board.</p> <p>Firstly, import library and define parameters:</p> <pre><code># Importing PYDAQ\nfrom pydaq.get_data import GetData\n\n# Defining parameters\nsample_period_in_seconds = 1\nsession_duration_in_seconds = 10.0\ncom_port_arduino = 'COM3'\nsave_data = True\nwill_plot = True\n</code></pre> <p>Then, instantiate a class with defined parametes and get the data</p> <pre><code># Class GetData\ng = GetData(com=com_port_arduino,\n            ts=sample_period_in_seconds,\n            session_duration=session_duration_in_seconds,\n            save=save_data,\n            plot=will_plot)\n\n# Method get_data_arduino\ng.get_data_arduino()\n</code></pre> <p>NOTE: data will be saved on desktop, by default. To change the path the user can define \"g.path = Desired path\"</p>"},{"location":"get_data_arduino/#presenting-acquired-data","title":"Presenting acquired data","text":"<p>To show acquired data, type:</p> <pre><code>print(f'First 10 values of time: \\n {g.time_var[0:10]}')\nprint(f'\\nFirst 10 values of data: \\n {g.data[0:10]}')\n</code></pre> <p>If you choose to plot you can see acquired data on screen, i.e:</p> <p></p> <p>Data will also be saved as depicted below:</p> <p></p>"},{"location":"get_data_nidaq/","title":"Data Acquisition with NIDAQ Boards","text":"<p>NOTE: before working with PYDAQ, device driver should be installed and working correctly as a DAQ (Data Acquisition) device</p>"},{"location":"get_data_nidaq/#data-acquitition-using-graphical-user-interface-gui","title":"Data Acquitition using Graphical User Interface (GUI)","text":"<p>Using GUI to acquire data is really straighforward and require only two LOC (lines of code):</p> <pre><code>from pydaq.pydaq_global import PydaqGui\n\n# Launch the interface\nPydaqGui()\n</code></pre> <p>After this command, the graphical user interface screen will show up, where the user should select the NIDAQ option and go to the Get Data tab, to be able to define parameters and start to acquire data.</p> <p></p> <p>The user is now able to select desired device, channel, terminal configuration (Differential, RSE and NRSE), sample period and session duration. Also, the user will define if the data will or not be plotted and saved, as well as the path to save data.</p>"},{"location":"get_data_nidaq/#data-acquitition-using-command-line","title":"Data Acquitition using command line","text":"<p>It will be presented how to use GetData (and get_data_nidaq) to acquire signal using a National Instruments board.</p> <p>Firstly, import library and define parameters:</p> <pre><code># Importing PYDAQ\nfrom pydaq.get_data import GetData\n\n# Defining parameters\ndevice_name = \"Dev1\"\nchannel_used = \"ai0\"\nterminal_configuration = 'Diff'\nsample_period_in_seconds = 1\nsession_duration_in_seconds = 10.0\nsave_data = True\nwill_plot = True\n</code></pre> <p>Then, instantiate a class with defined parametes and get the data</p> <pre><code># Class GetData\ng = GetData(device=device_name,\n            channel=channel_used,\n            terminal=terminal_configuration,\n            ts=sample_period_in_seconds,\n            session_duration=session_duration_in_seconds,\n            save=save_data,\n            plot=will_plot)\n\n# Method get_data_nidaq\ng.get_data_nidaq()\n</code></pre> <p>NOTE: data will be saved on desktop, by default. To change the path the user can define \"g.path = Desired path\"</p>"},{"location":"get_data_nidaq/#presenting-acquired-data","title":"Presenting acquired data","text":"<p>To show acquired data, type:</p> <pre><code>print(f'First 10 values of time: \\n {g.time_var[0:10]}')\nprint(f'\\nFirst 10 values of data: \\n {g.data[0:10]}')\n</code></pre> <p>If you choose to plot you can see acquired data on screen, i.e:</p> <p></p> <p>Data will also be saved as depicted below:</p> <p></p>"},{"location":"get_model_arduino/","title":"Model Acquisition with Arduino","text":"<p>NOTE 1: before working with PYDAQ, device driver should be installed and working correctly as a DAQ (Data Acquisition) device</p> <p>NOTE 2: To get models with Arduino, the code provided here  should be firstly uploaded in your Arduino board. Default input port is A0, and default output port is 13. Those ports can be changed  in the above-mentioned code. This code only works with digital output, since this is a limitation of Arduino Boards.</p> <p>NOTE 3: PYDAQ is programmed to use 10 bits as an ADC resolution, and 0V and 5V as the input range. To change this, the user can alter the following variables:</p> <pre><code>self.arduino_ai_bits = 10\nself.ard_ai_max = 5\nself.ard_ai_min = 0\n</code></pre>"},{"location":"get_model_arduino/#adquiring-the-model-using-graphical-user-interface-gui","title":"Adquiring the model using Graphical User Interface (GUI)","text":"<p>Using GUI to adquire the model is really straighforward and  require only two LOC (lines of code):</p> <pre><code>from pydaq.pydaq_global import PydaqGui\n\nPydaqGui()\n</code></pre> <p>After this command, the following screen will show up. In \"Get Model\"  screen the user is able to define parameters and start the experiment to adquire the model.</p> <p></p>"},{"location":"get_model_arduino/#parameters","title":"Parameters","text":"<ul> <li> <p>Choose your Arduino: This option allows you to choose the Arduino you are going to use.</p> </li> <li> <p>Sample Period: The user can change the sample period, i.e., time (in seconds) between samples.</p> </li> <li> <p>Start saving data: Choose when the data will start being recorded to obtain the model.</p> </li> <li> <p>Session duration: The user can choose the session duration.</p> </li> <li> <p>Plot and Save data: The user can choose whether to plot and save the data.</p> </li> <li> <p>Path: Choose where data will be saved.</p> </li> </ul>"},{"location":"get_model_arduino/#input-signal","title":"Input Signal","text":""},{"location":"get_model_arduino/#prbs","title":"PRBS","text":"<p>A pseudorandom binary sequence (PRBS) is a deterministic signal that alternates between two values and exhibits characteristics similar to white noise. The PRBS signal is inherently periodic, with a maximum period length of 2\u207f\u20131, where n represents the order of the PRBS. For more information: Nonlinear System Identification: Theory and Practice with Sysidentpy.</p> <p>In the Config signal button, the user can customize the signal parameters.</p>"},{"location":"get_model_arduino/#advanced-settings","title":"Advanced Settings","text":"<p>The library used for obtaining mathematical models is SysidentPy. It is a Python module for System Identification using NARMAX models, built on top of numpy and distributed under the 3-Clause BSD license. You can configure its parameters and customize the way the mathematical model is obtained. Read more about this in the SysidentPy documentation.</p> <p>By pressing the Get Model button, the program will start and the model will be obtained.</p>"},{"location":"get_model_arduino/#run-get-model-from-the-command-line","title":"Run Get model from the command line","text":"<pre><code>\n# Importing PYDAQ\nfrom pydaq.get_model import GetModel\n\n# Defining parameters\ncom_port_arduino = 'COM3'\nsession_duration_in_s = 100\nsample_period_in_s = 0.5\nsave_data = True\nplot_data = True\n\n# system identification parameters\ndegree = 2\nstart_save_time_in_s = 0\nout_lag = 2\ninp_lag = 2\nnum_info_val = 6\nestimator = 'least_squares'\next_lsq = True\nperc_value_to_train_the_model = 15\n\n# PRBS input parameters\nprbs_bits = 6\nprbs_seed = 100\nvar_tb = 1\n\n# Class GetModel\ng = GetModel(\n    com= com_port_arduino,\n    session_duration= session_duration_in_s,\n    ts= sample_period_in_s,\n    save= save_data,\n    plot= plot_data,\n    degree= 2,\n    start_save_time= start_save_time_in_s,\n    out_lag= out_lag,\n    inp_lag= inp_lag,\n    num_info_values= num_info_val,\n    estimator= estimator,\n    ext_lsq= ext_lsq,\n    perc_value= perc_value_to_train_the_model,\n    prbs_bits= prbs_bits,\n    prbs_seed= prbs_seed,\n    var_tb= var_tb\n    )\n\n# Method get_model_arduino\ng.get_model_arduino()\n\n</code></pre> <p>NOTE: data will be saved on desktop, by default. To change the path the user can define \"g.path = Desired path\".</p> <p>If the user chooses to plot, this screen will appear:</p> <p></p> <p>At the end of the user-defined time, screens with the results will be shown as depicted below.</p>"},{"location":"get_model_arduino/#example-gif","title":"Example GIF","text":""},{"location":"get_model_nidaq/","title":"Model Acquisition with NIDAQ Boards","text":"<p>NOTE: before working with PYDAQ, device driver should be installed and working correctly as a DAQ (Data Acquisition) device</p>"},{"location":"get_model_nidaq/#adquiring-the-model-using-graphical-user-interface-gui","title":"Adquiring the model using Graphical User Interface (GUI)","text":"<p>Using GUI to adquire the model is really straighforward and  require only two LOC (lines of code):</p> <pre><code>from pydaq.pydaq_global import PydaqGui\n\nPydaqGui()\n</code></pre> <p>After this command, the following screen will show up. In \"Get Model\"  screen the user is able to define parameters and start the experiment to adquire the model.</p> <p></p>"},{"location":"get_model_nidaq/#parameters","title":"Parameters","text":"<ul> <li> <p>Choose Device: The user is able to select desired device.</p> </li> <li> <p>Choose Channel: The user is able to select desired channel.</p> </li> <li> <p>Terminal Configuration: The user can change terminal configuration (Differential, RSE and NRSE).</p> </li> <li> <p>Sample Period: The user can change the sample period, i.e., time (in seconds) between samples.</p> </li> <li> <p>Start Saving Data: Choose when data will start being recorded to obtain the model.</p> </li> <li> <p>Session Duration: The user can choose the session duration, which will change the number of iterations.</p> </li> <li> <p>Plot and Save data: The user can choose whether to plot and save the data.</p> </li> <li> <p>Path: Choose where the data will be saved.</p> </li> </ul>"},{"location":"get_model_nidaq/#input-signal","title":"Input Signal","text":""},{"location":"get_model_nidaq/#prbs","title":"PRBS","text":"<p>A pseudorandom binary sequence (PRBS) is a deterministic signal that alternates between two values and exhibits characteristics similar to white noise. The PRBS signal is inherently periodic, with a maximum period length of 2\u207f\u20131, where n represents the order of the PRBS. For more information: Nonlinear System Identification: Theory and Practice with Sysidentpy</p> <p>In the Config signal button, the user can customize the signal parameters.</p>"},{"location":"get_model_nidaq/#advanced-settings","title":"Advanced Settings","text":"<p>The library used for obtaining mathematical models is SysidentPy. It is a Python module for System Identification using NARMAX models, built on top of numpy and distributed under the 3-Clause BSD license. You can configure its parameters and customize the way the mathematical model is obtained. Read more about this in the SysidentPy documentation.</p> <p>By pressing the Get Model button, the program will start and the model will be obtained.</p>"},{"location":"get_model_nidaq/#run-get-model-from-the-command-line","title":"Run Get model from the command line","text":"<pre><code># Importing PYDAQ\nfrom pydaq.get_model import GetModel\n\ndevice_name = (\"Dev1\",)\nao_channel = (\"ao0\",)\nai_channel = (\"ai0\",)\nchannel = (\"ai0\",)\nterminal = (\"Diff\",)\nao_min = (0,)\nao_max = (5,)\n\n# system identification parameters\ndegree = 2\nstart_save_time_in_s = 0\nout_lag = 2\ninp_lag = 2\nnum_info_val = 6\nestimator = \"least_squares\"\next_lsq = True\nperc_value_to_train_the_model = 15\n\n# PRBS input parameters\nprbs_bits = 6\nprbs_seed = 100\nvar_tb = 1\n\n# Class GetModel\ng = GetModel(\n    device=device_name,\n    ai_channel=ai_channel,\n    ao_channel=ao_channel,\n    ao_min=ao_min,\n    ao_max=ao_max,\n    channel=channel,\n    degree=degree,\n    start_save_time=start_save_time_in_s,\n    out_lag=out_lag,\n    inp_lag=inp_lag,\n    num_info_values=num_info_val,\n    estimator=estimator,\n    ext_lsq=ext_lsq,\n    perc_value=perc_value_to_train_the_model,\n    prbs_bits=prbs_bits,\n    prbs_seed=prbs_seed,\n    var_tb=var_tb,\n)\n\n# Method get_model_nidaq\ng.get_model_nidaq()\n</code></pre> <p>NOTE: data will be saved on desktop, by default. To change the path the user can define \"g.path = Desired path\".</p> <p>If the user chooses to plot, this screen will appear:</p> <p></p> <p>At the end of the user-defined time, screens with the results will be shown as depicted below.</p> <p></p>"},{"location":"jupyter_notebooks/","title":"Jupyter Notebooks","text":"<p>A full set of jupyter notebooks with several examples  of how to use NIDAQ and Arduino for data acquisition,  send data and other experiments can be found on Github repository.</p>"},{"location":"send_data_arduino/","title":"Sending Data with Arduino Boards","text":"<p>NOTE 1: before working with PYDAQ, device driver should be installed and working correctly as a DAQ (Data Acquisition) device</p> <p>NOTE 2: To acquire/send data with arduino, the code provided here (located at arduino_code) should be uploaded in Arduino first. Default output port is 13 and this port can be changed in the above mentioned code. This code only works with digital output, since this is a limitation of Arduino Boards.</p> <p>NOTE 3: Since are used digital output ports, the output will be 0V if data &lt; 2.5 and 5V otherwise.</p>"},{"location":"send_data_arduino/#sending-data-using-graphical-user-interface-gui","title":"Sending Data using Graphical User Interface (GUI)","text":"<p>Using GUI to send data is really straighforward and require only two LOC (lines of code):</p> <pre><code>from pydaq.pydaq_global import PydaqGui\n\n# Launch the interface\nPydaqGui()\n</code></pre> <p>After this command, the graphical user interface screen will show up, where the user should select the Arduino option and go to the Send Data tab, to be able to define parameters and start to send the data.</p> <p></p> <p>The user is now able to select desired Arduino and sample period. Also, the user will define if the data will or not be plotted. The data that will be sent should be in the range (0-5V).</p> <p>Data should be formated as one data per line and saved as a .dat file. After configuration is done, the user only need to click on SEND DATA button to start the process.</p>"},{"location":"send_data_arduino/#sending-data-using-command-line","title":"Sending data using command line","text":"<p>It will be presented how to use SendData (and send_data_arduino) to send a signal using an Arduino board.</p> <p>Firstly, import library and define parameters:</p> <pre><code># Importing PYDAQ\nfrom pydaq.send_data import SendData\n\n# Defining parameters\nsample_period_in_seconds = 1\ndata = [0, 0, 5, 5, 0, 0, 5, 5, 0, 0, 5, 5]  # It can be either a list or a numpy array\ncom_port_arduino = 'COM3'\nwill_plot = True\n</code></pre> <p>Then, instantiate a class with defined parametes and send the data</p> <pre><code># Class SendData\ns = SendData(data=data,\n             com=com_port_arduino,\n             ts=sample_period_in_seconds)\n\n# Method send_data_arduino()\ns.send_data_arduino()\n\n\n</code></pre> <p>If you choose to plot you can see the data sent on screen, i.e:</p> <p></p>"},{"location":"send_data_nidaq/","title":"Sending Data with NIDAQ Boards","text":"<p>NOTE: before working with PYDAQ, device driver should be installed and working correctly as a DAQ (Data Acquisition) device</p>"},{"location":"send_data_nidaq/#sending-data-using-graphical-user-interface-gui","title":"Sending Data using Graphical User Interface (GUI)","text":"<p>Using GUI to send data is really straighforward and require only two LOC (lines of code):</p> <pre><code>from pydaq.pydaq_global import PydaqGui\n\n# Launch the interface\nPydaqGui()\n</code></pre> <p>After this command, the graphical user interface screen will show up, where the user should select the NIDAQ option and go to the Send Data tab, to be able to define parameters and start to send data.</p> <p></p> <p>The user is now able to select desired device, analog output channel and sample period. Also, the user will define if the data will or not be plotted. The data that will be sent should be in the output range defined, formated as one data per line and saved as a .dat file. After configuration is done, the user only need to click on SEND DATA button to start the process.</p>"},{"location":"send_data_nidaq/#sending-data-using-command-line","title":"Sending data using command line","text":"<p>It will be presented how to use SendData (and send_data_nidaq) to send a signal using a National Instruments board.</p> <p>Firstly, import library and define parameters:</p> <pre><code># Importing PYDAQ\nfrom pydaq.send_data import SendData\n\n# Defining parameters\ndevice_name = \"Dev1\"\nchannel_used = \"ao0\"\nsample_period_in_seconds = 1\ndata = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]  # It can be either a list or a numpy array\nao_min = 0  # Minimum allowed analog output value\nao_max = 5  # Maximum allowed analog output value\nwill_plot = True\n</code></pre> <p>Then, instantiate a class with defined parametes and send the data</p> <pre><code># Class SendData\ns = SendData(data=data,\n             device=device_name,\n             channel=channel_used,\n             ts=sample_period_in_seconds,\n             ao_min=ao_min,\n             ao_max=ao_max,\n             plot=will_plot)\n\n# Method send_data_nidaq\ns.send_data_nidaq()\n</code></pre> <p>If you choose to plot you can see the data sent on screen, i.e:</p> <p></p>"},{"location":"step_response_arduino/","title":"Step response with Arduino boards","text":"<p>NOTE 1: before working with PYDAQ, device driver should be installed and working correctly as a DAQ (Data Acquisition) device</p> <p>NOTE 2: To acquire/send data with arduino, the code provided here (located at arduino_code) should be firstly uploaded in Arduino. Default output port is 13 and analog input is A0 and these ports can be changed in the above-mentioned code. This code only works with digital output, since this is a limitation of Arduino Boards.</p> <p>NOTE 3: Since are used digital output ports, the output will be 0V for step minimum and 5V for step maximum.</p>"},{"location":"step_response_arduino/#step-response-using-graphical-user-interface-gui","title":"Step Response using Graphical User Interface (GUI)","text":"<p>Using GUI for step response is really straighforward and require only two LOC (lines of code):</p> <pre><code>from pydaq.pydaq_global import PydaqGui\n\n# Launch the interface\nPydaqGui()\n</code></pre> <p>After this command, the graphical user interface screen will show up, where the user should select the Arduino option and go to the Step Response tab, to be able to define parameters and start to acquire data.</p> <p></p> <p>The user is now able to select desired Arduino and sample period, as well as the session duration and the time when the step will be on. Also, the user will define if the data will or not be plotted and saved.</p>"},{"location":"step_response_arduino/#step-response-using-command-line","title":"Step Response using command line","text":"<p>It will be presented how to use StepResponse (and step_response_arduino) to perform a step response experiment using an Arduino board.</p> <p>Firstly, import library and define parameters:</p> <pre><code># Importing PYDAQ\nfrom pydaq.step_response import StepResponse\n\n# Defining parameters\nsample_period_in_seconds = 1\nsession_duration_in_seconds = 10.0\nstep_time_in_seconds = 3.0\ncom_port_arduino = 'COM3'\nwill_plot = True\n</code></pre> <p>Then, instantiate a class with defined parametes and send the data</p> <pre><code># Class StepResponse\ns = StepResponse(com=com_port_arduino,\n                 ts=sample_period_in_seconds,\n                 session_duration=session_duration_in_seconds,\n                 step_time=step_time_in_seconds,\n                 plot=will_plot\n                 )\n\n# Method step_response_arduino\ns.step_response_arduino()\n</code></pre> <p>If you choose to plot you can see the data sent on screen, i.e:</p> <p></p>"},{"location":"step_response_nidaq/","title":"Step response with NIDAQ boards","text":"<p>NOTE 1: before working with PYDAQ, device driver should be installed and working correctly as a DAQ (Data Acquisition) device</p>"},{"location":"step_response_nidaq/#step-response-using-graphical-user-interface-gui","title":"Step Response using Graphical User Interface (GUI)","text":"<p>Using GUI for step response is really straighforward and require only two LOC (lines of code):</p> <pre><code>from pydaq.pydaq_global import PydaqGui\n\n# Launch the interface\nPydaqGui()\n</code></pre> <p>After this command, the graphical user interface screen will show up, where the user should select the NIDAQ option and go to the Step Response tab, to be able to define parameters and start to acquire data.</p> <p></p> <p>The user is now able to select desired NIDAQ device, analog input and analog output channel, as well as analog input terminal configuration. Step range and sample period can be adjusted along with session duration. Step will be applied in the defined time. Also, the user will define if the data will or not be plotted and saved.</p>"},{"location":"step_response_nidaq/#step-response-using-command-line","title":"Step Response using command line","text":"<p>It will be presented how to use StepResponse (and step_response_nidaq) to perform a step response experiment using an NIDAQ board.</p> <p>Firstly, import library and define parameters:</p> <pre><code># Importing PYDAQ\nfrom pydaq.step_response import StepResponse\n\n# Defining parameters\ndevice_name = \"Dev1\"\nao_channel_used = \"ao0\"\nai_channel_used = \"ai0\"\nsample_period_in_seconds = 1\nsession_duration_in_seconds = 10.0\nstep_time_in_seconds = 3.0\nstep_min_in_volts = 0\nstep_max_in_volts = 5\nterminal_configuration = 'Diff'\nwill_plot = True\n</code></pre> <p>Then, instantiate a class with defined parametes and send the data</p> <pre><code># Class StepResponse\ns = StepResponse(device=device_name,\n                 ao_channel=ao_channel_used,\n                 ai_channel=ai_channel_used,\n                 ts=sample_period_in_seconds,\n                 session_duration=session_duration_in_seconds,\n                 step_time=step_time_in_seconds,\n                 step_min=step_min_in_volts,\n                 step_max=step_max_in_volts,\n                 terminal=terminal_configuration,\n                 plot=will_plot)\n\n# Method step_response_nidaq\ns.step_response_nidaq()\n</code></pre> <p>If you choose to plot you can see the data sent on screen, i.e:</p> <p></p>"}]}